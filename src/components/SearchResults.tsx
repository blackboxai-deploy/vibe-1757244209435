'use client'

import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import LoadingSpinner from './LoadingSpinner'

interface SearchResult {
  query: string
  response: string
  timestamp: string
  model?: string
  success?: boolean
}

interface SearchResultsProps {
  results: SearchResult[]
  isLoading: boolean
}

export default function SearchResults({ results, isLoading }: SearchResultsProps) {
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center py-12">
        <LoadingSpinner size="lg" />
        <p className="mt-4 text-lg text-gray-600 dark:text-gray-400">
          AI is processing your query...
        </p>
        <p className="mt-2 text-sm text-gray-500 dark:text-gray-500">
          This may take a few moments
        </p>
      </div>
    )
  }

  if (results.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900 dark:to-blue-800 rounded-full flex items-center justify-center">
          <span className="text-3xl">üîç</span>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 dark:text-gray-200 mb-2">
          Ready to help you find answers
        </h3>
        <p className="text-gray-600 dark:text-gray-400 max-w-md mx-auto">
          Ask any question and get intelligent, comprehensive answers powered by advanced AI technology.
        </p>
      </div>
    )
  }

  const formatResponse = (response: string) => {
    // Split response into paragraphs and format
    const paragraphs = response.split('\n\n').filter(p => p.trim())
    
    return paragraphs.map((paragraph, index) => {
      // Check if it's a list item
      if (paragraph.match(/^\d+\./m) || paragraph.match(/^[-*]/m)) {
        const items = paragraph.split('\n').filter(item => item.trim())
        return (
          <ul key={index} className="space-y-2 mb-4">
            {items.map((item, itemIndex) => (
              <li key={itemIndex} className="flex items-start">
                <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
                <span>{item.replace(/^[-*]\s*/, '').replace(/^\d+\.\s*/, '')}</span>
              </li>
            ))}
          </ul>
        )
      }
      
      // Check if it's a heading
      if (paragraph.startsWith('#')) {
        const level = paragraph.match(/^#+/)?.[0].length || 1
        const text = paragraph.replace(/^#+\s*/, '')
        const headingLevel = Math.min(level + 1, 6)
        
        if (headingLevel === 2) {
          return (
            <h2 key={index} className="font-semibold text-gray-900 dark:text-gray-100 mb-3 mt-6 first:mt-0">
              {text}
            </h2>
          )
        } else if (headingLevel === 3) {
          return (
            <h3 key={index} className="font-semibold text-gray-900 dark:text-gray-100 mb-3 mt-6 first:mt-0">
              {text}
            </h3>
          )
        } else {
          return (
            <h4 key={index} className="font-semibold text-gray-900 dark:text-gray-100 mb-3 mt-6 first:mt-0">
              {text}
            </h4>
          )
        }
      }
      
      // Regular paragraph
      return (
        <p key={index} className="mb-4 leading-relaxed text-gray-700 dark:text-gray-300">
          {paragraph}
        </p>
      )
    })
  }

  return (
    <div className="space-y-6">
      {results.map((result, index) => (
        <Card key={index} className="shadow-lg border-0 bg-white dark:bg-gray-900">
          <CardContent className="p-8">
            {/* Query Header */}
            <div className="mb-6">
              <div className="flex items-center justify-between mb-2">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                  {result.query}
                </h2>
                {result.model && (
                  <Badge variant="secondary" className="text-xs">
                    {result.model}
                  </Badge>
                )}
              </div>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                {new Date(result.timestamp).toLocaleString()}
              </p>
            </div>

            {/* Response Content */}
            <div className="prose prose-lg dark:prose-invert max-w-none">
              {formatResponse(result.response)}
            </div>

            {/* Footer Actions */}
            <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                <span>‚ú® Generated by AI</span>
                <span>‚Ä¢</span>
                <span>Always verify important information</span>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}